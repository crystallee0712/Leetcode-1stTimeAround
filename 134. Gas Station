There are N gas stations along a circular route, where the amount of gas at station i is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). 
You begin the journey with an empty tank at one of the gas stations.

Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.

Java:

class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int start = 0;
        int accumulate = 0;
        int remain = 0;
     
        
        for (int i = 0; i < gas.length; i++) {
            gas[i]++;
            cost[i]++;
            remain = gas[i] - cost[i];           
            if (accumulate + remain < 0) {            
                start = i +1;
                accumulate = 0;
            }
            else
                accumulate += remain;
        }
        accumulate >= 0 ? start: -1;
        
    }
}

Python:

class Solution(object):
    def canCompleteCircuit(self, gas, cost):
        """
        :type gas: List[int]
        :type cost: List[int]
        :rtype: int
        """
      
        total_gas = 0
        total_cost = 0
        start = 0
        tank = 0
        for i in range(len(gas)):     
            total_gas += gas[i]
            total_cost += cost[i]
            tank += gas[i] - cost[i]   
            if tank < 0:
                start = i + 1
                tank = 0
        if total_gas >= total_cost:
            return start
        else:
            return -1
            
